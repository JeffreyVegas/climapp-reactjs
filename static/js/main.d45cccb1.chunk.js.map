{"version":3,"sources":["Component/Header.js","Component/Error.js","Component/Formulario.js","Component/Clima.js","Component/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","Error","errors","map","err","key","mensaje","Formulario","setData","errorInfo","useState","city","country","busqueda","setbuscaqueda","error","setError","listError","setListError","handleChange","e","target","name","value","consultarAPi","a","url","toLowerCase","fetch","respuesta","json","resultado","cod","console","log","onSubmit","preventDefault","trim","push","length","htmlFor","type","placeholder","onChange","Clima","data","sys","clima","main","wind","becomeKeltoCel","k","parseInt","temp","temp_max","temp_min","humidity","speed","Card","children","App","dataClima","setDataClima","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d45cccb1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <nav className=\"Header__Nav\">\r\n      <a className=\"Header__logo\" href=\"#!\">\r\n        CLIMAPP\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Error.css';\r\n\r\nconst Error = ({errors}) => {\r\n    return (\r\n      <>\r\n        {errors.map((err) => (\r\n          <p key={err.mensaje} className='Error__P'> * {err.mensaje}</p>\r\n        ))}\r\n      </>\r\n    );\r\n};\r\n\r\nexport default Error;","import React, { useState } from \"react\";\r\nimport Error from \"./Error\";\r\nimport \"./Formulario.css\";\r\n\r\nconst Formulario = ({ setData, errorInfo }) => {\r\n  const [busqueda, setbuscaqueda] = useState({\r\n    city: \"\",\r\n    country: \"\",\r\n  });\r\n\r\n  const [error, setError] = useState(false);\r\n  const [listError, setListError] = useState([]);\r\n\r\n  const { city, country } = busqueda;\r\n\r\n  const handleChange = (e) => {\r\n    setbuscaqueda({\r\n      ...busqueda,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const consultarAPi = async () => {\r\n    const appID = \"62191417b16e574ffde90a448c17399c\";\r\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city.toLowerCase()},${country}&appid=${appID}`;\r\n    const respuesta = await fetch(url);\r\n    const resultado = await respuesta.json();\r\n    if (resultado.cod === \"404\") {\r\n      console.log(\"comooo\");\r\n      errorInfo(true);\r\n      return;\r\n    }\r\n    setData(resultado);\r\n    errorInfo(false);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const listError = [];\r\n    //validate\r\n    if (city.trim() === \"\") {\r\n      listError.push({ mensaje: \"you must enter a city\" });\r\n    }\r\n    if (country.trim() === \"\") {\r\n      listError.push({ mensaje: \"you must enter a country\" });\r\n    }\r\n\r\n    if (listError.length > 0) {\r\n      setListError(listError);\r\n      setError(true);\r\n      return;\r\n    }\r\n    consultarAPi();\r\n    setError(false);\r\n  };\r\n\r\n  return (\r\n    <form className=\"Formulario__form\" onSubmit={handleSubmit}>\r\n      <h5 className=\"FormClima__title\">Formulario</h5>\r\n      {error ? <Error errors={listError} /> : null}\r\n      <label htmlFor=\"\">City</label>\r\n      <input\r\n        type=\"text\"\r\n        className=\"FomrCLima__input\"\r\n        placeholder=\"Ingresa ciudad\"\r\n        name=\"city\"\r\n        onChange={handleChange}\r\n      />\r\n      <label htmlFor=\"\">Country</label>\r\n      <select\r\n        className=\"FormClima__select\"\r\n        name=\"country\"\r\n        onChange={handleChange}\r\n      >\r\n        <option value=\"\">--Selecione Pais--</option>\r\n        <option value=\"PE\">PERU</option>\r\n        <option value=\"MX\">MEXICO</option>\r\n        <option value=\"US\">EEUU</option>\r\n        <option value=\"AR\">ARGENTINA</option>\r\n        <option value=\"CR\">COSTA RICA</option>\r\n        <option value=\"ES\">ESPANA</option>\r\n        <option value=\"CO\">COLOMBIA</option>\r\n      </select>\r\n      <button className=\"FormClima__button\">CONSULTAR</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Formulario;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport \"./Clima.css\";\r\n\r\nfunction Clima({ data }) {\r\n  const { name: city, sys: country, main: clima, wind } = data;\r\n\r\n  const becomeKeltoCel = (k) => {\r\n    return k - 273.15;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"clima__title\">\r\n        {country.country}, {city}\r\n      </div>\r\n      <div className=\"clima__temp\">\r\n        <span>temp:</span>\r\n        <span>{parseInt(becomeKeltoCel(clima.temp))}°</span>\r\n      </div>\r\n      <div className=\"clima__other-info\">\r\n        <p>\r\n          temp max: <span>{parseInt(becomeKeltoCel(clima.temp_max))}°</span>\r\n        </p>\r\n      </div>\r\n      <div className=\"clima__other-info\">\r\n        <p>\r\n          temp min: <span>{parseInt(becomeKeltoCel(clima.temp_min))}°</span>\r\n        </p>\r\n      </div>\r\n      <div className=\"clima__other-info\">\r\n        <p>\r\n          humedad: <span>{clima.humidity}%</span>\r\n        </p>\r\n      </div>\r\n      <div className=\"clima__other-info\">\r\n        <p>\r\n          viento: <span>{wind.speed} km/h</span>\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Clima;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card({ children }) {\r\n  return <div className=\"card2\">{children}</div>;\r\n}\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./Component/Header\";\nimport Formulario from \"./Component/Formulario\";\nimport Clima from \"./Component/Clima\";\nimport Card from \"./Component/Card\";\n\nconst App = () => {\n  const [dataClima, setDataClima] = useState(null);\n  const [error, setError] = useState(false);\n\n  return (\n    <>\n      <Header />\n      <div className=\"container mt-4\">\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <Formulario setData={setDataClima} errorInfo={setError} />\n          </div>\n          <div className=\"col-md-6\">\n            {dataClima ? (\n              <Card>\n                {error ? <p>error en los datos</p> : <Clima data={dataClima} />}\n              </Card>\n            ) : (\n              <Card>\n                <p>hello beatyfull</p>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}